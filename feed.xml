<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ymjie.github.io/</id><title>Ymjie's Blog</title><subtitle>爱翻墙，喜异见，猿类之一。好思考，走极端，强迫性折腾各种问题。较冷静，心智略成熟，稍有自我。</subtitle> <updated>2021-08-01T16:13:02+08:00</updated> <author> <name>Ymjie</name> <uri>https://ymjie.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ymjie.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://ymjie.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Ymjie </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>生命的时间只属于自己</title><link href="https://ymjie.github.io/posts/%E7%94%9F%E5%91%BD%E7%9A%84%E6%97%B6%E9%97%B4%E5%8F%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1/" rel="alternate" type="text/html" title="生命的时间只属于自己" /><published>2021-08-01T16:01:34+08:00</published> <updated>2021-08-01T16:12:39+08:00</updated> <id>https://ymjie.github.io/posts/%E7%94%9F%E5%91%BD%E7%9A%84%E6%97%B6%E9%97%B4%E5%8F%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1/</id> <content src="https://ymjie.github.io/posts/%E7%94%9F%E5%91%BD%E7%9A%84%E6%97%B6%E9%97%B4%E5%8F%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1/" /> <author> <name>Ymjie</name> </author> <category term="文章" /> <summary> 生命的时间只属于自己 并没有任何人可以评定任何人的“人生高度”，生命的本质是“一段生命时间”，每个人的“生命时间”只属于自己，是独有的“生命体验”，好、坏、对、错、意义、价值全由自己说了算，有且仅有自己负责。 一个人如何实现自己“生命时间”里的“生命意义”仅需要遵循自己内心的真实意愿，不由“父母”、“伴侣”、“朋友”或“外界眼光”、“观念”捆绑和评定。 充分体验自己人生过程的每一个体验，达成“忠于自己真实意愿”的人生目标，就是独有的价值。世界是多元的，生命体验是变幻、难以控制的，并没有非要特定的“名利双收，有钱有权”才是成功的人生。 在西藏，有这样一句谚语：我们照顾好当下的每一分钟，岁月就会照顾好它们自己。 伙伴们的人生清单上有什么呢？ 也许鲜少人有着一夜成名、价值百万的辉煌时刻，我们都有着艰难时日中微小而真实的体验喜悦的时刻：享受喜爱食物的香气，和真诚相待的亲友共度时光... </summary> </entry> <entry><title>面向对象的三大特征（封装、继承、多态）、继承详解</title><link href="https://ymjie.github.io/posts/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81-%E5%B0%81%E8%A3%85-%E7%BB%A7%E6%89%BF-%E5%A4%9A%E6%80%81-%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/" rel="alternate" type="text/html" title="面向对象的三大特征（封装、继承、多态）、继承详解" /><published>2021-06-27T22:53:34+08:00</published> <updated>2021-06-27T22:53:34+08:00</updated> <id>https://ymjie.github.io/posts/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81-%E5%B0%81%E8%A3%85-%E7%BB%A7%E6%89%BF-%E5%A4%9A%E6%80%81-%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/</id> <content src="https://ymjie.github.io/posts/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81-%E5%B0%81%E8%A3%85-%E7%BB%A7%E6%89%BF-%E5%A4%9A%E6%80%81-%E7%BB%A7%E6%89%BF%E8%AF%A6%E8%A7%A3/" /> <author> <name>Ymjie</name> </author> <category term="学习笔记" /> <category term="Python" /> <summary> 面向对象的三大特征（封装、继承、多态） 封装：隐藏对象的属性和实现细节，只对外提供必要的方法，相当于将“细节封装起来”，只对外暴露“相关的调用方法”。封装可以通过“私有属性、私有方法”的方式，实现封装。 继承：继承可以让子类具有父类的特性，提高了代码的复用性。继承从设计上是一个增量进化，原有父类设计不变的情况下，可以增加新的功能，或者改进已有的算法。 多态：指同一个方法调用由于对象的不同会产生不同的行为。 继承 继承是面向对象程序设计的重要特征，也是实现“代码复用”的重要手段。如果一个新类继承自一个设计好的类，就直接具备了已有类的特征，会大大降低工作难度。已有的类，我们称为“父类或者基类”，新的类，我们称为“子类或者派生类”。 语法格式 Python支持多重继承，一个子类可以继承多个父类。继承的语法格式如下： class 子类类名（父类1[,父类2,…]） 类体 如果在类定... </summary> </entry> <entry><title>HTTP协议状态码 导图</title><link href="https://ymjie.github.io/posts/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%AF%BC%E5%9B%BE/" rel="alternate" type="text/html" title="HTTP协议状态码 导图" /><published>2021-06-11T21:53:34+08:00</published> <updated>2021-06-11T22:05:37+08:00</updated> <id>https://ymjie.github.io/posts/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%AF%BC%E5%9B%BE/</id> <content src="https://ymjie.github.io/posts/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E5%AF%BC%E5%9B%BE/" /> <author> <name>Ymjie</name> </author> <category term="学习笔记" /> <category term="HTTP协议" /> <summary> </summary> </entry> <entry><title>Git 学习笔记 从零搭建本地代码仓库</title><link href="https://ymjie.github.io/posts/git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/" rel="alternate" type="text/html" title="Git 学习笔记 从零搭建本地代码仓库" /><published>2021-06-11T11:33:00+08:00</published> <updated>2021-06-11T11:33:00+08:00</updated> <id>https://ymjie.github.io/posts/git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/</id> <content src="https://ymjie.github.io/posts/git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/" /> <author> <name>Ymjie</name> </author> <category term="学习笔记" /> <category term="Git" /> <category term="一" /> <summary> 从零搭建本地代码仓库 git init git init 命令创建一个新的 Git 仓库。它用来将已存在但还没有版本控制的项目转换成一个 Git 仓库，或者创建一个空的新仓库。 用法 git init &amp;lt;directory&amp;gt; 在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。 git init --bare &amp;lt;directory&amp;gt; 初始化一个裸的 Git 仓库，但是忽略工作目录。共享的仓库应该总是用 --bare 标记创建（见下面的讨论）。一般来说，用 —bare 标记初始化的仓库以 .git 结尾。比如，一个叫my-project的仓库，它的空版本应该保存在 my-project.git 目录下。 讨论 对大多数项目来说，git init 只需要在创建中央仓库时执行一次—... </summary> </entry> </feed>
